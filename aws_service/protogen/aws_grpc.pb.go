// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AWSClient is the client API for AWS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AWSClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type aWSClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSClient(cc grpc.ClientConnInterface) AWSClient {
	return &aWSClient{cc}
}

func (c *aWSClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/aws_service.AWS/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSServer is the server API for AWS service.
// All implementations must embed UnimplementedAWSServer
// for forward compatibility
type AWSServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedAWSServer()
}

// UnimplementedAWSServer must be embedded to have forward compatible implementations.
type UnimplementedAWSServer struct {
}

func (UnimplementedAWSServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAWSServer) mustEmbedUnimplementedAWSServer() {}

// UnsafeAWSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSServer will
// result in compilation errors.
type UnsafeAWSServer interface {
	mustEmbedUnimplementedAWSServer()
}

func RegisterAWSServer(s grpc.ServiceRegistrar, srv AWSServer) {
	s.RegisterService(&AWS_ServiceDesc, srv)
}

func _AWS_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aws_service.AWS/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AWS_ServiceDesc is the grpc.ServiceDesc for AWS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aws_service.AWS",
	HandlerType: (*AWSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _AWS_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aws.proto",
}
